'use strict';

// Events is basically a signals generated by DOM nodes.
// A signal means something has happened. eg. click somewhere, mouse moving
// We can listen these Events in our code using Event Listeners to handle them - addEventListener()

// MOUSE ENTER EVENTS
const h1 = document.querySelector('h1');
// now we can listen for the event by adding - addEventListener()
// 'mouseenter' - is kind a like hover effect in CSS, when mouse enters into certain elements

 // we can also REMOVE Event Handler incase we don't need it anymore after first occurence
 // To do it, first we need to export a function into a Named Function/Function Expression
 // h1.removeEventListener('mouseenter', alertH1); 
 // NOTE - To make event listen/occur ONCE only
 const alertH1 = () => {
  // event & callback function
  alert('addEventListener: Great! You are reading the heading :D');
};

// NOTE- addEventListener() is better
// First, it allows us to 'add multiple event listeners' to the same Event.
h1.addEventListener('mouseenter', alertH1);

// removeEventListener - in function moving here
// NOTE - NOW THE EVENT OCCURS ONLY ONCE BEFORE 3s
setTimeout(() => h1.removeEventListener('mouseenter', alertH1), 3000);

// note - mouse events
// https://developer.mozilla.org/en-US/docs/Web/API/Element#mouse_events

// NOTE: This is consider an OLD SCHOOL way of listening Events
// NOTE: Another way of attaching 'EVENT LISTENER' to an Element which is
// by using 'ON EVENT PROPERTY' directly to an Element
h1.onclick = () => {
  console.log('addEventListener: Great! You are reading the heading :D');
};

// NOTE - another way is the INLINE EVENT in html elements
// NOT recommended, old way of javascript
